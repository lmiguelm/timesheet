// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  Timesheet     Timesheet[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificaion_token")
}

model Timesheet {
  id    String   @id @default(uuid())
  createdAt  DateTime @default(now()) @db.Timestamptz @map("created_at")
  total Float
  tasks Task[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("timesheets")
}

enum StatusTask {
  OPEN
  IN_PROGRESS
  PAUSED
  CLOSED
}

model Task {
  id                String     @id @default(uuid())
  description       String
  start             DateTime?  @db.Timestamptz
  end               DateTime?  @db.Timestamptz
  status            StatusTask @default(OPEN)
  totalWithPause    Float      @map("total_with_pause")
  totalWithoutPause Float      @map("total_without_pause")
  totalPauses       Float      @map("total_pauses")
  pauses            Pause[]

  Timesheet   Timesheet? @relation(fields: [timesheetId], references: [id])
  timesheetId String? @map("timesheet_id")

  @@map("tasks")
}

model Pause {
  id    String    @id @default(uuid())
  start DateTime? @db.Timestamptz
  end   DateTime? @db.Timestamptz
  total Float

  Task   Task?   @relation(fields: [taskId], references: [id])
  taskId String? @map("task_id")

  @@map("pauses")
}
